{
    // Appearance
    "editor.fontFamily": "'Fira Code', monospace",
    "editor.fontSize": 13,
    "editor.fontLigatures": true,
    "editor.wordWrapColumn": 165,
    "editor.fontWeight": "bold",
    "editor.rulers": [ 120 ],
    "terminal.integrated.fontSize": 13,
    "window.titleBarStyle": "native",
    "window.menuBarVisibility": "toggle",
    "window.zoomLevel": 0,
    "workbench.sideBar.location": "left",
    "workbench.colorTheme": "Visual Studio Dark",
    "workbench.iconTheme": "material-icon-theme",
    "workbench.colorCustomizations": {
        "statusBarItem.remoteBackground": "#22a4f1",
        "rust_analyzer.inlayHints.foreground": "#d4d4d4",
        "[Visual Studio Dark]": {
            "statusBar.background": "#333",
            "statusBar.noFolderBackground": "#333",
            "statusBar.noFolderBorder": "#333",
            "editorCursor.foreground": "#ffffff85",
            "editorCursor.background": "#333",
            "editor.lineHighlightBorder": "#1e1e1e",
            "editorRuler.foreground": "#5a5a5a20",
            "rust_analyzer.inlayHints.foreground": "#878787",
        },
    },

    "editor.semanticTokenColorCustomizations": {
        "rules": {
            "*.mutable": { "underline": true, },
            "*.unsafe": { "italic": true, },
        },
        "[Visual Studio Dark]": {
            "rules": {
                "enum": "#4ec9b0",
                "enumMember": "#d4d4d4",
                "interface": "#4ec9b0",
                "type": "#4ec9b0",
                "typeAlias": "#4ec9b0",
                "typeParameter": "#4ec9b0",
                "punctuation": "#a9a9a9",
                "macro": "#d4d4d4",
                "operator": "#b1b1b1",
            },
        },
    },

    "editor.tokenColorCustomizations": {
        "textMateRules": [
            {
                "scope": "constant.other.placeholder.c",
                "settings": { "fontStyle": "italic" }
            },
        ],
        "[Visual Studio Dark]": {
            "keywords": "#c586c0",
            "comments": {
                "foreground": "#a9a9a9",
                "fontStyle": "italic"
            },
            "textMateRules": [
                {
                    "scope": [
                        "keyword.other.sql",
                        "keyword.other.DML.sql",
                     ],
                    "settings": {
                        "foreground": "#ce9178",
                        "fontStyle": "italic"
                    }
                },
                {
                    "scope": "keyword.operator",
                    "settings": { "foreground": "#b1b1b1" },
                },
                {
                    "scope": "entity.name.section.spec",
                    "settings": { "foreground": "#c586c0" },
                },
                {
                    "scope": [
                        "storage.type.php",
                        "storage.type.function.php",
                    ],
                    "settings": { "foreground": "#569cd6" },
                },
                {
                    "scope": [
                        "entity.name.function.preprocessor",
                        // PHP
                        "constant.language.php",
                    ],
                    "settings": { "foreground": "#d4d4d4", }
                },
                {
                    "scope": [
                        // C/C++
                        "meta.preprocessor.conditional.cpp",
                        "punctuation.definition.begin.bracket.square.c",
                        "punctuation.definition.end.bracket.square.c",
                        "punctuation.definition.parameters.begin.preprocessor.cpp",
                        "punctuation.definition.parameters.end.preprocessor.cpp",
                        "punctuation.section.arguments.begin.bracket.round.c",
                        "punctuation.section.arguments.end.bracket.round.c",
                        "punctuation.section.arguments.begin.bracket.round.initializer.cpp",
                        "punctuation.section.arguments.end.bracket.round.initializer.cpp",
                        "punctuation.section.block.begin.bracket.curly.c",
                        "punctuation.section.block.end.bracket.curly.c",
                        "punctuation.section.parens.begin.bracket.round.c",
                        "punctuation.section.parens.end.bracket.round.c",
                        "punctuation.section.parens.begin.bracket.round.cpp",
                        "punctuation.section.parens.end.bracket.round.cpp",
                        "punctuation.section.parens.begin.bracket.round.function.pointer.cpp",
                        "punctuation.section.parens.end.bracket.round.function.pointer.cpp",
                        "punctuation.section.parameters.begin.bracket.round.c",
                        "punctuation.section.parameters.end.bracket.round.c",
                        "punctuation.section.parameters.begin.bracket.round.cpp",
                        "punctuation.section.parameters.end.bracket.round.cpp",
                        "punctuation.section.parameters.begin.bracket.round.function.pointer.cpp",
                        "punctuation.section.parameters.end.bracket.round.function.pointer.cpp",
                        "punctuation.separator.dot-access.c",
                        "punctuation.separator.delimiter.c",
                        "punctuation.separator.pointer-access.c",
                        "punctuation.separator.pointer-access.cpp",
                        "punctuation.terminator.statement.c",
                        "punctuation.terminator.statement.cpp",
                        // Shell
                        "punctuation.definition.variable.shell",
                        "punctuation.definition.group.shell",
                        "punctuation.definition.arguments.shell",
                        "punctuation.definition.logical-expression.shell",
                        "keyword.operator.list.shell",
                        "keyword.operator.pipe.shell",
                        "keyword.operator.redirect.shell",
                        "keyword.operator.heredoc.shell",
                        "punctuation.definition.subshell.shell",
                        // GO
                        "punctuation.definition.begin.bracket.curly.go",
                        "punctuation.definition.end.bracket.curly.go",
                        "punctuation.definition.begin.bracket.round.go",
                        "punctuation.definition.end.bracket.round.go",
                        "punctuation.definition.bracket.square.go",
                        "punctuation.other.comma.go",
                        "punctuation.other.colon.go",
                        "punctuation.other.period.go",
                        "punctuation.terminator.go",
                        "keyword.operator.logical.go",
                        // Python
                        "punctuation.definition.arguments.begin.python",
                        "punctuation.definition.arguments.end.python",
                        "punctuation.definition.list.begin.python",
                        "punctuation.definition.list.end.python",
                        "punctuation.definition.parameters.begin.python",
                        "punctuation.definition.parameters.end.python",
                        "punctuation.section.function.begin.python",
                        "punctuation.separator.colon.python",
                        "punctuation.separator.continuation.line.python",
                        "punctuation.separator.dict.python",
                        "punctuation.separator.element.python",
                        "punctuation.separator.period.python",
                        "meta.function.decorator.python",
                        // PHP
                        "punctuation.definition.begin.bracket.round.php",
                        "punctuation.definition.end.bracket.round.php",
                        "punctuation.definition.arguments.begin.bracket.round.php",
                        "punctuation.definition.arguments.end.bracket.round.php",
                        "punctuation.definition.array.begin.bracket.round.php",
                        "punctuation.definition.array.end.bracket.round.php",
                        "punctuation.definition.variable.php",
                        "punctuation.separator.delimiter.php",
                        "punctuation.terminator.expression.php",
                        "punctuation.terminator.statement.php",
                        "storage.modifier.reference.php",
                        // JSON
                        "punctuation.separator.array.json.comments",
                        "punctuation.separator.dictionary.pair.json.comments",
                        "punctuation.separator.dictionary.key-value.json.comments",
                    ],
                    "settings": { "foreground": "#a9a9a9", }
                },
                {
                    "scope": "storage.type.built-in.primitive.c",
                    "settings": { "foreground": "#4ec9b0", }
                },
            ]
        },
    },

    "bracket-pair-colorizer-2.colors": [
        "#909090",
    ],
    "bracket-pair-colorizer-2.scopeLineCSS": [
        "borderStyle : solid",
        "borderWidth : 1px",
        "borderColor : #707070",
        "opacity: 1"
    ],

    // Edit
    "breadcrumbs.enabled": true,
    "editor.detectIndentation": false,
    "editor.formatOnSave": false,
    "editor.insertSpaces": true,
    "editor.lineNumbers": "relative",
    "editor.renderLineHighlight": "none",
    "editor.renderWhitespace": "selection",
    "editor.minimap.enabled": true,
    "editor.minimap.renderCharacters": false,
    "editor.minimap.showSlider": "always",
    "editor.scrollbar.verticalScrollbarSize": 0, // use the minimap as the scrollbar
    "editor.quickSuggestions": true,
    "editor.suggestOnTriggerCharacters": true,
    "editor.suggestSelection": "first",
    "editor.tabSize": 4,
    "workbench.editor.enablePreview": false,
    "workbench.editorAssociations": [
        {
            "viewType": "jupyter.notebook.ipynb",
            "filenamePattern": "*.ipynb"
        }
    ],

    // Misc.
    "explorer.confirmDelete": false,
    "explorer.confirmDragAndDrop": false,
    "[jsonc]": {
        "editor.defaultFormatter": "vscode.json-language-features"
    },

    // Better Comment
    "better-comments.tags": [
        {
            "tag": "fixme",
            "color": "#FF2D00",
            "strikethrough": false,
            "underline": false,
            "backgroundColor": "transparent",
            "bold": false,
            "italic": false
        },
        {
            "tag": "xxx",
            "color": "#FF2D00",
            "strikethrough": false,
            "underline": false,
            "backgroundColor": "transparent",
            "bold": false,
            "italic": false
        },
        {
            "tag": "note",
            "color": "#3498DB",
            "strikethrough": false,
            "underline": false,
            "backgroundColor": "transparent",
            "bold": false,
            "italic": false
        },
        {
            "tag": "todo",
            "color": "#FF8C00",
            "strikethrough": false,
            "underline": false,
            "backgroundColor": "transparent",
            "bold": false,
            "italic": false
        },
    ],

    // C/C++
    "C_Cpp.updateChannel": "Default",
    "C_Cpp.enhancedColorization": "Enabled",
    "C_Cpp.intelliSenseEngine": "Default",

    // CMake
    "cmake.configureOnOpen": true,

    // Gitlens
    "gitlens.codeLens.enabled": false,
    "gitlens.currentLine.enabled": false,
    "gitlens.statusBar.format": "${author}(${agoOrDate}): \"${message}\"",

    // Go
    "go.formatTool": "goreturns",

    // Markdownlint
    "markdownlint.config": {
        "MD024": false,
    },

    // multi-command
    "multiCommand.commands": [
        {
            "command": "multiCommand.vimFindInFiles",
            "sequence": [
                "extension.vim_escape",
                "workbench.action.findInFiles",
            ]
        },
        {
            "command": "multiCommand.vimSelectedSuggestionAndEscape",
            "sequence": [
                "acceptSelectedSuggestionOnEnter",
                "extension.vim_escape",
            ]
        },
        {
            "command": "multiCommand.vimCancelSuggestionAndEscape",
            "sequence": [
                "hideSuggestWidget",
                "extension.vim_escape",
            ]
        },
        {
            "command": "multiCommand.vimPreviousEditor",
            "sequence": [
                "extension.vim_escape",
                "workbench.action.previousEditor",
            ]
        },
        {
            "command": "multiCommand.vimNextEditor",
            "sequence": [
                "extension.vim_escape",
                "workbench.action.nextEditor",
            ]
        },
        {
            "command": "multiCommand.openLatestUsedEditor",
            "sequence": [
                "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
                "workbench.action.acceptSelectedQuickOpenItem",
            ]
        },
        {
            "command": "multiCommand.vimQuickOpen",
            "sequence": [
                "extension.vim_escape",
                "workbench.action.quickOpen",
            ]
        },
        {
            "command": "multiCommand.vimFocusFirstEditorGroupAndEscape",
            "sequence": [
                "workbench.action.focusFirstEditorGroup",
                "extension.vim_escape"
            ]
        },
        {
            "command": "multiCommand.vimOpenResultAndEscape",
            "sequence": [
                "search.action.openResult",
                "extension.vim_escape"
            ]
        },
        {
            "command": "multiCommand.vimMarkAndFind",
            "sequence": [
                {"command": "type", "args": {"text": "m"}},
                {"command": "type", "args": {"text": "z"}},
                "actions.find",
            ]
        },
        {
            "command": "multiCommand.vimMarkAndFindAndJumpNextMatch",
            "sequence": [
                "cursorLeft",
                "cursorWordRight",
                "actions.find",
                "closeFindWidget",
                "cancelSelection",
                "extension.vim_escape",
                "editor.action.nextMatchFindAction",
            ]
        },
        {
            "command": "multiCommand.vimMarkAndFindAndJumpPrevMatch",
            "sequence": [
                "cursorRight",
                "cursorWordLeft",
                "actions.find",
                "closeFindWidget",
                "cancelSelection",
                "extension.vim_escape",
                "editor.action.previousMatchFindAction",
            ]
        },
        {
            "command": "multiCommand.vimCloseFindWidget",
            "sequence": [
                "closeFindWidget",
                "cancelSelection",
                "extension.vim_escape",
                {"command": "type", "args": {"text": "q"}},
                {"command": "type", "args": {"text": "z"}},
                {"command": "type", "args": {"text": "q"}},
            ]
        },
        {
            "command": "multiCommand.vimCloseFindWidgetAndGoBack",
            "sequence": [
                "closeFindWidget",
                "cancelSelection",
                "extension.vim_escape",
                {"command": "type", "args": {"text": "`"}},
                {"command": "type", "args": {"text": "z"}},
                {"command": "type", "args": {"text": "q"}},
                {"command": "type", "args": {"text": "z"}},
                {"command": "type", "args": {"text": "q"}},
            ]
        },
        {
            "command": "multiCommand.revealReferenceAndHide",
            "sequence": [
                "revealReference",
                "closeReferenceSearch",
                "extension.vim_escape",
            ]
        },
        {
            "command": "multiCommand.goNextChangeAndShow",
            "sequence": [
                "workbench.action.editor.nextChange",
                "editor.action.dirtydiff.next",
            ]
        },
        {
            "command": "multiCommand.goPreviousChangeAndShow",
            "sequence": [
                "workbench.action.editor.previousChange",
                "editor.action.dirtydiff.previous",
            ]
        },
        {
            "command": "multiCommand.cancelSuggestionAndInsertNewline",
            "sequence": [
                "hideSuggestWidget",
                {
                    "command": "type",
                    "args": {
                        "text": "\n"
                    },
                },
            ]
        },
        {
            "command": "multiCommand.vimCursorUndo",
            "sequence": [
                "cursorUndo",
                "cancelSelection",
                "extension.vim_escape",
            ]
        }
    ],

    // Python
    "python.languageServer": "Pylance",
    "python.showStartPage": false,

    // Remote Development
    "remote.SSH.showLoginTerminal": true,

    // Rust Analyzer
    "rust-analyzer.serverPath": "~/.cargo/bin/rust-analyzer",
    "rust-analyzer.checkOnSave.command": "clippy",
    "rust-analyzer.inlayHints.chainingHints": false,
    "rust-analyzer.inlayHints.parameterHints": false,

    // Vim
    "workbench.list.keyboardNavigation": "simple", // see, https://github.com/Microsoft/vscode/issues/66995#issuecomment-457123611
    "vim.sneak": true,
    "vim.camelCaseMotion.enable": true,
    "vim.sneakUseIgnorecaseAndSmartcase": true,
    "vim.incsearch": true,
    "vim.useSystemClipboard": true,
    "vim.useCtrlKeys": true,
    "vim.hlsearch": true,
    "vim.highlightedyank.enable": true,
    "vim.surround": true,
    "vim.visualstar": true,
    "vim.leader": "<space>",
    "vim.handleKeys": {
        "<C-w>": false,
        "<C-z>": false,
    },
    "vim.insertModeKeyBindingsNonRecursive": [
        {
            "before": [ "<C-h>" ],
            "commands": [ { "command": "deleteLeft" } ]
        },
    ],
    "vim.visualModeKeyBindingsNonRecursive": [
        {
            "before": [ "<C-o>" ],
            "commands": [ { "command": "multiCommand.vimCursorUndo" } ]
        },
        {
            "before": [ "<C-r>" ],
            "commands": [ { "command": "redo" } ]
        },
        {
            "before": [ "N" ],
            "commands": [ { "command": "editor.action.previousMatchFindAction" } ]
        },
        {
            "before": [ "n" ],
            "commands": [ { "command": "editor.action.nextMatchFindAction" } ]
        },
        {
            "before": [
                "g",
                "J",
            ],
            "commands": [ { "command": "editor.action.moveLinesDownAction" } ]
        },
        {
            "before": [
                "g",
                "K",
            ],
            "commands": [ { "command": "editor.action.moveLinesUpAction" } ]
        },
        {
            "before": [
                "<leader>",
                ";"
            ],
            "commands": [
                { "command": "editor.action.commentLine" },
                { "command": "extension.vim_escape" }
            ]
        },
        {
            "before": [
                "<leader>",
                "x",
                "f"
            ],
            "commands": [
                { "command": "editor.action.formatSelection" },
                { "command": "cancelSelection" },
                { "command": "extension.vim_escape" }
            ]
        },
    ],
    "vim.normalModeKeyBindingsNonRecursive": [
        {
            "before": [ "<C-o>" ],
            "commands": [ { "command": "multiCommand.vimCursorUndo" } ]
        },
        {
            "before": [ "<C-r>" ],
            "commands": [ { "command": "redo" } ]
        },
        {
            "before": [ "#" ],
            "commands": [ { "command": "multiCommand.vimMarkAndFindAndJumpPrevMatch" } ]
        },
        {
            "before": [ "*" ],
            "commands": [ { "command": "multiCommand.vimMarkAndFindAndJumpNextMatch" } ]
        },
        {
            "before": [ "/" ],
            "commands": [ { "command": "multiCommand.vimMarkAndFind" } ]
        },
        {
            "before": [ "N" ],
            "commands": [ { "command": "editor.action.previousMatchFindAction" } ]
        },
        {
            "before": [ "n" ],
            "commands": [ { "command": "editor.action.nextMatchFindAction" } ]
        },
        {
            "before": [ "u" ],
            "commands": [
                { "command": "undo" },
                { "command": "extension.vim_escape" }
            ]
        },
        {
            "before": [
                "g",
                "B"
            ],
            "commands": [ { "command": "editor.action.selectHighlights" } ]
        },
        {
            "before": [
                "g",
                "D"
            ],
            "commands": [ { "command": "editor.action.referenceSearch.trigger" } ]
        },
        {
            "before": [
                "g",
                "J",
            ],
            "commands": [ { "command": "editor.action.moveLinesDownAction" } ]
        },
        {
            "before": [
                "g",
                "K",
            ],
            "commands": [ { "command": "editor.action.moveLinesUpAction" } ]
        },
        {
            "before": [
                "g",
                "x"
            ],
            "commands": [ { "command": "editor.action.openLink" } ]
        },
        {
            "before": [
                "<leader>",
                "<tab>",
            ],
            "commands": [ { "command": "multiCommand.openLatestUsedEditor" } ]
        },
        {
            "before": [
                "<leader>",
                ";",
            ],
            "commands": [ { "command": "editor.action.commentLine" } ]
        },
        {
            "before": [
                "<leader>",
                "f",
                "f"
            ],
            "commands": [ { "command": "workbench.action.files.openFile" } ]
        },
        {
            "before": [
                "<leader>",
                "f",
                "n"
            ],
            "commands": [ { "command": "workbench.action.files.newUntitledFile" } ]
        },
        {
            "before": [
                "<leader>",
                "f",
                "y"
            ],
            "commands": [ { "command": "workbench.action.files.copyPathOfActiveFile" } ]
        },
        // NOTE: has been occupied by Vim extension
        // {
        //     "before": [
        //         "<leader>",
        //         "b",
        //     ],
        // },
        {
            "before": [
                "<leader>",
                "i",
                "s"
            ],
            "commands": [ { "command": "editor.action.insertSnippet" } ]
        },
        // NOTE: has been occupied by Vim extension
        // {
        //     "before": [
        //         "<leader>",
        //         "w",
        //     ],
        // },
        {
            "before": [
                "<leader>",
                "x",
                "f"
            ],
            "commands": [ { "command": "editor.action.formatDocument" } ]
        },
    ],
    "gitlens.views.lineHistory.enabled": true,
}