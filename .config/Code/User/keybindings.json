// Place your key bindings in this file to override the defaults
[
    // Emacs keybinding
    {
        "key": "ctrl+h",
        "command": "-editor.action.startFindReplaceAction"
    },
    {
        "key": "ctrl+h",
        "command": "deleteLeft",
        "when": "textInputFocus && !editorReadonly && !vim.active"
    },

    // Customized
    {
        "key": "enter",
        "command": "multiCommand.revealReferenceAndHide",
        "when": "listFocus && referenceSearchVisible && !inputFocus"
    },
    {
        "key": "shift-=",
        "command": "git.stageChange",
        "when": "dirtyDiffVisible"
    },
    {
        "key": "ctrl+shift+q",
        "command": "workbench.action.toggleMaximizedPanel",
        "when": "terminalFocus"
    },

    // Tab and Shift + Tab
    {
        "key": "ctrl+tab",
        "command": "workbench.action.nextEditor",
        "when": "!sideBarFocus || !vim.active || vim.mode != 'Insert'"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.previousEditor",
        "when": "!sideBarFocus || !vim.active || vim.mode != 'Insert'"
    },
    {
        "key": "tab",
        "command": "tab",
        "when": "editorTextFocus && vim.mode == 'Insert' && !suggestWidgetVisible"
    },
    {
        "key": "tab",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },

    // Vim
    {
        "key": "escape",
        "command": "multiCommand.vimCancelFindWidget",
        "when": "vim.active && editorTextFocus && findWidgetVisible && !findInputFocussed"
    },
    {
        "key": "escape",
        "command": "multiCommand.vimCancelFindWidgetAndGoBack",
        "when": "vim.active && findInputFocussed"
    },
    {
        "key": "escape",
        "command": "multiCommand.vimCancelSuggestionAndEscape",
        "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus && vim.active && vim.mode == 'Insert'"
    },
    {
        "key": "enter",
        "command": "multiCommand.vimSelectedSuggestionAndEscape",
        "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus && vim.active && vim.mode == 'Insert'"
    },
    {
        "key": "enter",
        "command": "multiCommand.vimCancelFindWidget",
        "when": "vim.active && findInputFocussed"
    },
    {
        "key": "enter",
        "command": "multiCommand.vimOpenResultAndEscape",
        "when": "fileMatchOrMatchFocus && searchViewletVisible && vim.active"
    },
    {
        "key": "ctrl+shift+f",
        "command": "multiCommand.vimFindInFiles",
        "when": "editorTextFocus && vim.active && vim.mode == 'Insert'"
    },
    {
        "key": "ctrl+shift+p",
        "command": "multiComamnd.vimEscapeAndShowCommands",
        "when": "editorTextFocus && vim.active && vim.mode == 'Insert'"
    },
    {
        "key": "ctrl+tab",
        "command": "multiCommand.vimFocusFirstEditorGroupAndEscape",
        "when": "sideBarFocus && vim.active"
    },
    {
        "key": "ctrl+tab",
        "command": "multiCommand.vimOpenNextRecentlyUsedEditorInGroup",
        "when": "editorTextFocus && vim.active && vim.mode == 'Insert'"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "multiCommand.vimOpenPreviousRecentlyUsedEditorInGroup",
        "when": "editorTextFocus && vim.active && vim.mode == 'Insert'"
    },

    // H/J/K/L
    {
        "key": "ctrl+j",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+j",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+k",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+j",
        "command": "search.focus.nextInputBox",
        "when": "inputBoxFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+k",
        "command": "search.focus.previousInputBox",
        "when": "inputBoxFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+j",
        "command": "editor.action.nextMatchFindAction",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "ctrl+k",
        "command": "editor.action.previousMatchFindAction",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "ctrl+j",
        "command": "multiCommand.goNextChangeAndShow",
        "when": "editorTextFocus && !findInputFocussed && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+k",
        "command": "multiCommand.goPreviousChangeAndShow",
        "when": "editorTextFocus && !findInputFocussed && vim.active && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.compareEditor.nextChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.compareEditor.previousChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "ctrl+j",
        "command": "list.focusDown",
        "when": "hasSearchResult && searchViewletFocus && !inputBoxFocus"
    },
    {
        "key": "ctrl+k",
        "command": "list.focusUp",
        "when": "hasSearchResult && searchViewletFocus && !inputBoxFocus"
    },
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },

    // HHKB Pro2
    {
        "key": "shift+NumPad_Add",
        "command": "type",
        "args": { "text": "=" },
        "when": "editorTextFocus"
    },
    {
        "key": "shift+NumPad_Subtract",
        "command": "type",
        "args": { "text": "_" },
        "when": "editorTextFocus"
    },
    {
        "key": "shift+NumPad_Divide",
        "command": "type",
        "args": { "text": "\\" },
        "when": "editorTextFocus"
    },
    {
        "key": "shift+numpad_multiply",
        "command": "type",
        "args": { "text": "#" },
        "when": "editorTextFocus"
    },
]
