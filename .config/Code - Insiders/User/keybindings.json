// Place your key bindings in this file to override the defaults
[
    // Emacs keybinding
    {
        "key": "ctrl+a",
        "command": "-editor.action.selectAll"
    },
    {
        "key": "ctrl+a",
        "command": "cursorHome",
        "when": "editorTextFocus && vim.mode == 'Insert'"
    },
    {
        "key": "ctrl+b",
        "command": "-workbench.action.toggleSidebarVisibility",
    },
    {
        "key": "ctrl+b",
        "command": "cursorLeft",
        "when": "editorTextFocus && vim.mode == 'Insert'"
    },
    {
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpen"
    },
    {
        "key": "ctrl+e",
        "command": "-workbench.action.quickOpenNavigateNextInFilePicker",
        "when": "inFilesPicker && inQuickOpen"
    },
    {
        "key": "ctrl+e",
        "command": "cursorEnd",
        "when": "editorTextFocus && vim.mode == 'Insert'"
    },
    {
        "key": "ctrl+f",
        "command": "-actions.find",
        "when": "editorFocus || editorIsOpen"
    },
    {
        "key": "ctrl+f",
        "command": "cursorRight",
        "when": "editorTextFocus && vim.mode == 'Insert'"
    },
    {
        "key": "ctrl+h",
        "command": "-editor.action.startFindReplaceAction"
    },
    {
        "key": "ctrl+h",
        "command": "deleteLeft",
        "when": "textInputFocus && !editorReadonly && !vim.active"
    },

    // Customized
    {
        "key": "escape",
        "command": "-gitlens.key.escape",
        "when": "editorTextFocus && gitlens:key:escape && !findWidgetVisible && !isInEmbeddedEditor && !renameInputVisible && !suggestWidgetVisible"
    },
    {
        "key": "escape",
        "command": "multiCommand.closeGitBlameAndShowSidebar",
        "when": "editorTextFocus && gitlens:key:escape && !findWidgetVisible && !isInEmbeddedEditor && !renameInputVisible && !suggestWidgetVisible && !parameterHintsVisible"
    },
    {
        "key": "enter",
        "command": "multiCommand.revealReferenceAndHide",
        "when": "listFocus && referenceSearchVisible && !inputFocus"
    },
    {
        "key": "=",
        "command": "git.stageChange",
        "when": "editorTextFocus && dirtyDiffVisible"
    },
    // - for side bar
    {
        "key": "=",
        "command": "explorer.newFile",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    {
        "key": "shift-=",
        "command": "explorer.newFolder",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    // - for search editor
    {
        "key": "enter",
        "command": "search.focus.nextInputBox",
        "when": "inSearchEditor && searchInputBoxFocus && !findInputFocussed"
    },
    {
        "key": "enter",
        "command": "editor.action.revealDefinition",
        "when": "inSearchEditor && !searchInputBoxFocus && !findInputFocussed"
    },
    {
        "key": "ctrl+i",
        "command": "search.action.focusQueryEditorWidget",
        "when": "inSearchEditor && !searchInputBoxFocus"
    },
    // - for panel
    {
        "key": "alt+m",
        "command": "workbench.action.toggleMaximizedPanel",
    },
    {
        "key": "alt+q",
        "command": "workbench.action.closePanel"
    },
    {
        "key": "alt+q",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminalFocus"
    },
    {
        "key": "alt+1",
        "command": "multiCommand.switchFirstTermianl",
        "when": "terminalFocus"
    },
    {
        "key": "alt+2",
        "command": "multiCommand.switchSecondTermianl",
        "when": "terminalFocus"
    },
    {
        "key": "alt+3",
        "command": "multiCommand.switchThirdTermianl",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+9",
        "command": "-workbench.action.lastEditorInGroup"
    },
    {
        "key": "ctrl+9",
        "command": "workbench.action.focusPanel"
    },
    {
        "key": "ctrl+alt+p",
        "command": "workbench.action.showCommands"
    },
    {
        "key": "ctrl+f",
        "command": "-workbench.action.terminal.focusFind",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+shift+f",
        "command": "workbench.action.terminal.focusFind",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },

    // Tab and Shift + Tab
    {
        "key": "ctrl+tab",
        "command": "workbench.action.nextEditor",
        "when": "!sideBarFocus || !vim.active || vim.mode != 'Insert'"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "workbench.action.previousEditor",
        "when": "!sideBarFocus || !vim.active || vim.mode != 'Insert'"
    },
    {
        "key": "tab",
        "command": "tab",
        "when": "editorTextFocus && vim.mode == 'Insert' && !suggestWidgetVisible"
    },
    {
        "key": "tab",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },

    // Vim
    {
        "key": "enter",
        "command": "multiCommand.vimOpenResultAndEscape",
        "when": "fileMatchOrMatchFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+shift+f",
        "command": "multiCommand.vimFindInFiles",
        "when": "editorTextFocus && vim.mode == 'Insert'"
    },
    {
        "key": "ctrl+1",
        "command": "multiCommand.vimFocusFirstEditorGroupAndEscape",
        "when": "sideBarFocus"
    },
    {
        "key": "ctrl+tab",
        "command": "multiCommand.vimFocusFirstEditorGroupAndEscape",
        "when": "sideBarFocus"
    },
    {
        "key": "ctrl+tab",
        "command": "multiCommand.vimNextEditor",
        "when": "editorTextFocus && vim.mode == 'Insert'"
    },
    {
        "key": "ctrl+shift+tab",
        "command": "multiCommand.vimPreviousEditor",
        "when": "editorTextFocus && vim.mode == 'Insert'"
    },
    // - for quick open
    {
        "key": "ctrl+p",
        "command": "multiCommand.vimQuickOpen",
        "when": "editorTextFocus && vim.mode == 'Insert'"
    },
    {
        "key": "ctrl+alt+p",
        "command": "multiCommand.vimShowCommand",
        "when": "editorTextFocus && vim.mode == 'Insert'"
    },
    // - for intellisense
    {
        "key": "enter",
        "command": "multiCommand.vimSelectedSuggestionAndEscape",
        "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus && vim.mode == 'Insert'"
    },
    {
        "key": "shift+enter",
        "command": "multiCommand.cancelSuggestionAndInsertNewline",
        "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus && vim.mode == 'Insert'"
    },
    {
        "key": "escape",
        "command": "multiCommand.vimCancelSuggestionAndEscape",
        "when": "acceptSuggestionOnEnter && suggestWidgetVisible && suggestionMakesTextEdit && textInputFocus && vim.mode == 'Insert'"
    },
    // - for find
    {
        "key": "enter",
        "command": "-editor.action.nextMatchFindAction",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "enter",
        "command": "multiCommand.vimCloseFindWidget",
        "when": "editorFocus && findInputFocussed"
    },
    {
        "key": "escape",
        "command": "multiCommand.vimCloseFindWidgetAndGoBack",
        "when": "editorFocus && findInputFocussed && !parameterHintsVisible"
    },
    {
        "key": "escape",
        "command": "multiCommand.vimCloseFindWidget",
        "when": "editorTextFocus && !findInputFocussed && findWidgetVisible && !parameterHintsVisible"
    },
    // H/J/K/L
    {
        "key": "ctrl+j",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "ctrl+j",
        "command": "editor.action.moveLinesDownAction",
        "when": "editorTextFocus && !editorReadonly && vim.mode != 'Normal' && !findInputFocussed && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+k",
        "command": "editor.action.moveLinesUpAction",
        "when": "editorTextFocus && !editorReadonly && vim.mode != 'Normal' && !findInputFocussed && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+shift+j",
        "command": "editor.action.copyLinesDownAction",
        "when": "editorTextFocus && !editorReadonly && vim.mode != 'Normal' && !findInputFocussed && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+shift+k",
        "command": "editor.action.copyLinesUpAction",
        "when": "editorTextFocus && !editorReadonly && vim.mode != 'Normal' && !findInputFocussed && !suggestWidgetVisible"
    },
    // - for quick open
    {
        "key": "ctrl+j",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    // - for intellisense
    {
        "key": "ctrl+j",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+k",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    // - for side bar
    {
        "key": "ctrl+j",
        "command": "search.focus.nextInputBox",
        "when": "inputBoxFocus && searchViewletVisible"
    },
    {
        "key": "ctrl+k",
        "command": "search.focus.previousInputBox",
        "when": "inputBoxFocus && searchViewletVisible"
    },
    {
        "key": "h",
        "command": "previousCompressedFolder",
        "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus"
    },
    {
        "key": "ctrl+h",
        "command": "previousCompressedFolder",
        "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus"
    },
    {
        "key": "l",
        "command": "nextCompressedFolder",
        "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus"
    },
    {
        "key": "ctrl+l",
        "command": "nextCompressedFolder",
        "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus"
    },
    // - for git
    {
        "key": "ctrl+j",
        "command": "multiCommand.goNextChangeAndShow",
        "when": "editorTextFocus && dirtyDiffVisible"
    },
    {
        "key": "ctrl+k",
        "command": "multiCommand.goPreviousChangeAndShow",
        "when": "editorTextFocus && dirtyDiffVisible"
    },
    // - for marker(i.e. error)
    {
        "key": "ctrl+j",
        "command": "editor.action.marker.next",
        "when": "editorTextFocus && markersNavigationVisible"
    },
    {
        "key": "ctrl+k",
        "command": "editor.action.marker.prev",
        "when": "editorTextFocus && markersNavigationVisible"
    },
    // - for diff
    {
        "key": "ctrl+h",
        "command": "workbench.action.compareEditor.focusSecondarySide",
        "when": "editorTextFocus && textCompareEditorVisible"
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.compareEditor.nextChange",
        "when": "editorTextFocus && textCompareEditorVisible"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.compareEditor.previousChange",
        "when": "editorTextFocus && textCompareEditorVisible"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.compareEditor.focusPrimarySide",
        "when": "editorTextFocus && textCompareEditorVisible"
    },
    // - for find
    {
        "key": "ctrl+j",
        "command": "editor.action.nextMatchFindAction",
        "when": "findInputFocussed && !searchViewletFocus && !suggestWidgetVisible"
    },
    {
        "key": "ctrl+k",
        "command": "editor.action.previousMatchFindAction",
        "when": "findInputFocussed && !searchViewletFocus && !suggestWidgetVisible"
    },
    // - for search editor
    {
        "key": "ctrl+j",
        "command": "multiCommand.vimFocusNextAndEscape",
        "when": "editorTextFocus && inSearchEditor && !findInputFocussed"
    },
    {
        "key": "ctrl+k",
        "command": "multiCommand.vimFocusPrevAndEscape",
        "when": "editorTextFocus && inSearchEditor && !findInputFocussed"
    },
    // - for breadcrumb
    {
        "key": "ctrl+h",
        "command": "multiCommand.goParentSymbol",
        "when": "editorTextFocus && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+h",
        "command": "breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    {
        "key": "ctrl+j",
        "command": "multiCommand.goNextSymbol",
        "when": "editorTextFocus && vim.mode == 'Normal' && !findInputFocussed && !suggestWidgetVisible && !dirtyDiffVisible && !isInDiffEditor && !inSearchEditor && !markersNavigationVisible"
    },
    {
        "key": "ctrl+k",
        "command": "multiCommand.goPrevSymbol",
        "when": "editorTextFocus && vim.mode == 'Normal' && !findInputFocussed && !suggestWidgetVisible && !dirtyDiffVisible && !isInDiffEditor && !inSearchEditor && !markersNavigationVisible"
    },
    {
        "key": "ctrl+l",
        "command": "breadcrumbs.focusAndSelect",
        "when": "editorTextFocus && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+l",
        "command": "breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
    },
    // - for list
    {
        "key": "ctrl+h",
        "command": "list.collapse",
        "when": "listFocus && !inputFocus && !breadcrumbsActive && !explorerViewletCompressedFocus"
    },
    {
        "key": "h",
        "command": "-list.collapse",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "h",
        "command": "list.collapse",
        "when": "listFocus && !inputFocus && !explorerViewletCompressedFocus"
    },
    {
        "key": "h",
        "command": "list.collapse",
        "when": "listFocus && !inputFocus && explorerViewletCompressedFocus && explorerViewletCompressedFirstFocus"
    },
    {
        "key": "ctrl+j",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "j",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+k",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "k",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+l",
        "command": "list.expand",
        "when": "listFocus && !inputFocus && !breadcrumbsActive && !explorerViewletCompressedFocus"
    },
    {
        "key": "l",
        "command": "-list.select",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "l",
        "command": "list.expand",
        "when": "listFocus && !inputFocus && !explorerViewletCompressedFocus"
    },
    {
        "key": "l",
        "command": "list.expand",
        "when": "listFocus && !inputFocus && explorerViewletCompressedFocus && explorerViewletCompressedLastFocus"
    },

    // N/P
    {
        "key": "alt+p",
        "command": "-togglePreserveCase",
        "when": "editorFocus"
    },
    // - for git timemachine
    {
        "key": "alt+n",
        "command": "gitlens.diffWithNextInDiffLeft",
        "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "alt+n",
        "command": "gitlens.diffWithNextInDiffRight",
        "when": "editorTextFocus && isInDiffEditor &&  isInDiffRightEditor && gitlens:activeFileStatus =~ /revision/"
    },
    {
        "key": "alt+p",
        "command": "gitlens.diffWithPreviousInDiffLeft",
        "when": "editorTextFocus && isInDiffEditor && !isInDiffRightEditor && gitlens:activeFileStatus =~ /tracked/"
    },
    {
        "key": "alt+p",
        "command": "gitlens.diffWithPreviousInDiffRight",
        "when": "editorTextFocus && isInDiffEditor &&  isInDiffRightEditor && gitlens:activeFileStatus =~ /tracked/"
    },

    // HHKB Pro2
    {
        "key": "shift+NumPad_Add",
        "command": "type",
        "args": {
            "text": "="
        },
        "when": "editorTextFocus"
    },
    {
        "key": "shift+NumPad_Subtract",
        "command": "type",
        "args": {
            "text": "_"
        },
        "when": "editorTextFocus"
    },
    {
        "key": "shift+NumPad_Divide",
        "command": "type",
        "args": {
            "text": "\\"
        },
        "when": "editorTextFocus"
    },
    {
        "key": "shift+numpad_multiply",
        "command": "type",
        "args": {
            "text": "#"
        },
        "when": "editorTextFocus"
    },
]
