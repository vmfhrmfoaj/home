#!/bin/bash

_is_shim() {
    local name=$1
    which "${name}" | grep -q -E "^${HOME}/\.shim/"
    if [ $? -eq 0 ]; then
        return 0
    else
        return 255
    fi
}

_add_to_path() {
    local new_path=$1
    local is_append=${2:-'no'}
    if [ -n "${new_path}" ]; then
        if [ -d "${new_path}" ] && [ 0 = $(echo ${PATH} | grep -c "${new_path}") ]; then
            if [ "${is_append}" = "yes" ]; then
                export PATH="${PATH}:${new_path}"
            else
                export PATH="${new_path}:${PATH}"
            fi
        fi
    fi
}

_setup_for_android() {
    local android_home="${HOME}/.android/sdk"
    if [ -d ${android_home} ]; then
        export ANDROID_HOME="${android_home}"
        _add_to_path "${android_home}/tools/bin"
        _add_to_path "${android_home}/platform-tools"
    fi
}

_setup_for_asdf() {
    local asdf_home="${HOME}/.asdf"
    if [ ! -d "${asdf_home}" ]; then
        echo -n "Do you want to install 'ASDF'? (Y or N): "
        read yn
        if [ -n "$(echo ${yn} | grep -E -i '^y(es)?$')" ]; then
            git clone 'https://github.com/asdf-vm/asdf.git' "${asdf_home}" --branch v0.7.4
        else
            mkdir -p ${asdf_home}
            mkdir -p "${HOME}/.shim"
            cat > "${HOME}/.shim/asdf" <<EOF
#!/bin/bash
echo -n "Do you want to install 'ASDF'? (Y or N): "
read yn
if [ -n "\$(echo \${yn} | grep -E -i '^y(es)?\$')" ]; then
    rm -rf ${asdf_home}
    git clone 'https://github.com/asdf-vm/asdf.git' "${asdf_home}" --branch v0.7.4
    rm -rf \$0
fi
EOF
            chmod +x "${HOME}/.shim/asdf"
        fi
    fi
    [ -r "${asdf_home}/asdf.sh" ]               && source "${asdf_home}/asdf.sh"
    [ -r "${asdf_home}/completions/asdf.bash" ] && source "${asdf_home}/completions/asdf.bash"
}

_setup_for_clojure() {
    which lein > /dev/null 2>&1
    if [ $? -ne 0 ]; then
        local lein_path="${HOME}/.bin/lein"
        echo -n "Do you want to install 'Lein(Clojure project manager)'? (Y or N): "
        read yn
        if [ -n "$(echo ${yn} | grep -E -i '^y(es)?$')" ]; then
            mkdir -p $(dirname ${lein_path})
            wget -O ${lein_path} 'https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein'
            chmod +x ${lein_path}
        else
            mkdir -p "${HOME}/.shim"
            cat > "${HOME}/.shim/lein" <<EOF
#!/bin/bash
echo -n "Do you want to install 'Lein(Clojure project manager)'? (Y or N): "
read yn
if [ -n "\$(echo \${yn} | grep -E -i '^y(es)?\$')" ]; then
    wget -O ${lein_path} 'https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein'
    chmod +x ${lein_path}
fi
EOF
            chmod +x "${HOME}/.shim/lein"
        fi
    fi
}

_setup_for_deno() {
    _is_shim 'asdf'
    if [ $? -ne 0 ]; then
        local deno_home=$(asdf where deno 2>/dev/null)
        if [ $? -eq 0 ]; then
            export DENO_DIR="${deno_home}/.deno"
            export DENO_INSTALL_ROOT="${deno_home}/.deno/bin"
            _add_to_path "${deno_home}/.deno/bin"
        fi
    fi
}

_setup_for_java() {
    _is_shim 'asdf'
    if [ $? -ne 0 ]; then
        local java_home=$(asdf where java 2>/dev/null)
        if [ -d "${java_home}" ]; then
            export JAVA_HOME=${java_home}
        fi
    fi
}

_setup_for_kotlin() {
    _is_shim 'asdf'
    if [ $? -ne 0 ]; then
        if [ -d "$(asdf where java 2>/dev/null)" ]; then
            local kotlin_home="${HOME}/.kotlin"
            local temp_file="/tmp/kotlin-langauge-server.zip"
            if [ ! -d "${kotlin_home}" ]; then
                wget --quiet -O "${temp_file}" 'https://github.com/fwcd/kotlin-language-server/releases/latest/download/server.zip'
                if [ $? -eq 0 ]; then
                    mkdir -p "${kotlin_home}"
                    unzip -q -d "${kotlin_home}" "${temp_file}"
                fi
            fi
            _add_to_path "${kotlin_home}/server/bin"
        fi
    fi
}

_setup_for_lua() {
    _is_shim 'asdf'
    if [ $? -ne 0 ]; then
        local lua_home=$(asdf where lua 2>/dev/null)
        if [ -d "${lua_home}" ]; then
            local luarocks_bin="${lua_home}/luarocks/bin";
            if [ -d "${luarocks_bin}" ]; then
                _add_to_path "${luarocks_bin}"
            fi
        fi
    fi
}

_setup_for_nodejs() {
    _is_shim 'asdf'
    if [ $? -ne 0 ]; then
        local nodejs_home=$(asdf where nodejs 2>/dev/null)
        if [ -d "${nodejs_home}/.npm/bin" ]; then
            _add_to_path "${nodejs_home}/.npm/bin"
        fi
    fi
}

_setup_for_locale() {
    export LANG=en_US.UTF-8
    export LC_ALL=en_US.UTF-8
}

_setup_for_perlbrew() {
    export PERLBREW_ROOT="${HOME}/.perlbrew"
    if [ ! -d ${PERLBREW_ROOT} ]; then
        echo -n "Do you want to install 'Perlbrew'? (Y or N): "
        read yn
        if [ -n "$(echo ${yn} | grep -E -i '^y(es)?$')" ]; then
            curl -fsSL 'https://install.perlbrew.pl' | bash
        else
            mkdir -p ${PERLBREW_ROOT}
            mkdir -p "${HOME}/.shim"
            cat > "${HOME}/.shim/perlbrew" <<EOF
#!/bin/bash
echo -n "Do you want to install 'Perlbrew'? (Y or N): "
read yn
if [ -n "\$(echo \${yn} | grep -E -i '^y(es)?\$')" ]; then
    rm -rf ${PERLBREW_ROOT}
    curl -fsSL 'https://install.perlbrew.pl' | bash
    rm -rf \$0
fi
EOF
            chmod +x "${HOME}/.shim/perlbrew"
        fi
    fi
    [ -r "${PERLBREW_ROOT}/etc/bashrc" ] && source "${PERLBREW_ROOT}/etc/bashrc"
}

_setup_for_rust() {
    if [ ! -d "${HOME}/.cargo" ] || [ ! -d "${HOME}/.rustup" ]; then
        echo -n "Do you want to install 'rustup'? (Y or N): "
        read yn
        if [ -n "$(echo ${yn} | grep -E -i '^y(es)?$')" ]; then
            # see, https://github.com/rust-lang/rustup.rs/issues/953#issuecomment-318650338
            curl 'https://sh.rustup.rs' -sSf | RUSTUP_INIT_SKIP_PATH_CHECK=yes sh -s -- --no-modify-path --default-toolchain nightly
            if [ -r "${HOME}/.cargo/env" ]; then
                source "${HOME}/.cargo/env"
                rustup toolchain add stable
                rustup toolchain add nightly
                rustup default nightly
                rustup component add rls rust-analysis rust-src # for rls (Rust Language Server)
            fi
        else
            mkdir -p "${HOME}/.rustup"
            mkdir -p "${HOME}/.cargo"
            mkdir -p "${HOME}/.shim"
            cat > "${HOME}/.shim/rustup" <<\EOF
#!/bin/bash
echo -n "Do you want to install 'rustup'? (Y or N): "
read yn
if [ -n "$(echo ${yn} | grep -E -i '^y(es)?$')" ]; then
    rm -rf ${HOME}/.cargo
    rm -rf ${HOME}/.rustup
    curl 'https://sh.rustup.rs' -sSf | RUSTUP_INIT_SKIP_PATH_CHECK=yes sh -s -- --no-modify-path --default-toolchain nightly
    if [ -r "${HOME}/.cargo/env" ]; then
        source "${HOME}/.cargo/env"
        rustup toolchain add stable
        rustup toolchain add nightly
        rustup default nightly
        rustup component add rls rust-analysis rust-src # for rls (Rust Language Server)
    fi
    rm -rf $0
    rm -rf "$(dirname $0)/rustup"
fi
EOF
            chmod +x "${HOME}/.shim/rustup"
            which cargo >/dev/null 2>&1
            if [ $? -ne 0 ] ; then
                cp "${HOME}/.shim/rustup" "${HOME}/.shim/cargo"
            fi
        fi
    fi
    which rustc >/dev/null 2>&1
    if [ $? -eq 0 ] && [ ! -x "${HOME}/.bin/cargo" ]; then
        mkdir -p "${HOME}/.bin"
        cat > "${HOME}/.bin/cargo" <<\EOF
#!/bin/bash

cur_dir=$(pwd)
cd $(dirname $0)
export PATH=$(echo "${PATH}" | sed "s@$(pwd):@@g")
cd "${cur_dir}"

if [ -n "${CARGO_ROOT_TARGET_DIR}" ] && [ -z "${CARGO_TARGET_DIR}" ]; then
    root=$(cargo locate-project | jq -r '.root' | xargs dirname)
    encoded_root=$(echo -n ${root} | sha1sum | cut -d' ' -f1)
    export CARGO_TARGET_DIR="${CARGO_ROOT_TARGET_DIR}/$(basename ${root})-${encoded_root}"
fi

exec cargo $@
EOF
        chmod +x "${HOME}/.bin/cargo"
    fi
    if [ -r "${HOME}/.cargo/env" ]; then
        source "${HOME}/.cargo/env"
        export CARGO_ROOT_TARGET_DIR=/tmp/cargo
    else
        if [ -d  "${HOME}/.cargo/bin" ]; then
            _add_to_path "${HOME}/.cargo/bin"
            export CARGO_ROOT_TARGET_DIR=/tmp/cargo
        fi
    fi
    if [ ! -r  "${HOME}/.oh-my-zsh/custom/plugins/rustup/_rustup" ]; then
        mkdir -p "${HOME}/.oh-my-zsh/custom/plugins/rustup"
        rustup completions zsh > "${HOME}/.oh-my-zsh/custom/plugins/rustup/_rustup"
        rm -rf "${HOME}/.zcompdump*"
    fi
}

_setup_for_go() {
    export GOPATH="${HOME}/.go"
    export GO111MODULE=on
    if [ -d "${GOPATH}/bin" ]; then
        _add_to_path "${GOPATH}/bin"
    fi
}

_setup_for_schroot() {
    if [ -z "${DISPLAY}" ]; then
        # See, https://lukeplant.me.uk/blog/posts/chroot-with-x-applications/
        export DISPLAY=:0.0
    fi
}

_is_ssh_agent_running() {
    if [ -n "${SSH_AUTH_SOCK}" ] && [ -S "${SSH_AUTH_SOCK}" ]; then
        echo 'OK'
        return 0
    else
        echo 'NO'
        return 255
    fi
}

_setup_for_term() {
    local cache_file=${1:-"${HOME}/.ssh/ssh-agent-for-remote"}
    if [ 'OK' = "$(_is_ssh_agent_running)" ]; then
        return 0
    fi
    if [ -r "${cache_file}" ]; then
        source "${cache_file}"
        if [ 'OK' = "$(_is_ssh_agent_running)" ]; then
            return 0
        fi
    fi
    mkdir -p $(dirname "${cache_file}")
    ssh-agent -s > "${cache_file}"
    source "${cache_file}"
}

_setup_for_ssh() {
    if [ -n "${DISPLAY}" ]; then
        if [ -z "${LIBGL_ALWAYS_INDIRECT}" ]; then
            export LIBGL_ALWAYS_INDIRECT=1
        fi
        if [ -z "${GTK_BACKEND}" ]; then
            export GDK_BACKEND=x11
        fi
        if [ -z "${XDG_CURRENT_DESKTOP}" ]; then
            # NOTE
            #  `gnome-control-center` will throw an error.
            #  see, https://bugzilla.redhat.com/show_bug.cgi?id=1645855
            export XDG_CURRENT_DESKTOP=GNOME
        fi
    fi
}

_setup_for_wsl() {
    if [ -z "${DISPLAY}" ]; then
        export DISPLAY=localhost:0.0
    fi
    # for VcXsrv
    if [ -z "${LIBGL_ALWAYS_INDIRECT}" ]; then
        export LIBGL_ALWAYS_INDIRECT=1
    fi
    which xrdb > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        xrdb -merge "${HOME}/.Xresources"
    fi
}

_setup_for_xorg() {
    which numlockx > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        numlockx on
    fi
}


# add dirs to PATH
_add_to_path '/sbin'
_add_to_path '/usr/sbin'

# add shim dir to PATH
_add_to_path "${HOME}/.shim"

# basic setup
_setup_for_android
_setup_for_asdf
_setup_for_clojure
_setup_for_go
_setup_for_locale
_setup_for_perlbrew
_setup_for_rust
_setup_for_xorg

# depend on `asdf`
_setup_for_deno
_setup_for_java
_setup_for_kotlin
_setup_for_lua
_setup_for_nodejs

# add user binary dirs to PATH
_add_to_path "${HOME}/.local/bin"
_add_to_path "${HOME}/.bin"

# for only terminal environment
if [ -t 1 ] && [ -n "${SHELL}" ]; then
    _setup_for_term
fi

# for GUI or X11 forwarding
if [ -n "${DISPLAY}" ]; then
    # for X11 forwarding
    if [ -n "$(echo ${DISPLAY} | grep ':10' )" ]; then
        _setup_for_ssh
    fi
fi

if [ 'yes' = "${SCHROOT_CHROOT_NAME+yes}" ]; then
    _setup_for_schroot
fi

if [ 'yes' = "${WSLENV+yes}" ]; then
    _setup_for_wsl
fi

# add shim dir to PATH
_add_to_path "${HOME}/.shim"
