#!/bin/bash

_install_android_studio_from_tar() {
    local tar_file=$1
    local target_dir=${2:-"${HOME}/.android-studio"}
    if [ -z "${tar_file}" ]; then
        echo "Usage: $0 [TAR_FILE] [TARGET_DIR]?"
        return 255
    fi

    mkdir -p "${target_dir}"
    tar -C "${target_dir}" -xf "${tar_file}" --strip-components=1 'android-studio'
    if [ $? -ne 0 ]; then
        >&2 echo "Can't unpack '${tar_file}' to '${target_dir}'"
        return 255;
    fi

    local sym_file="${HOME}/.bin/android-studio"
    mkdir -p $(dirname "${sym_file}")
    rm -rf "${sym_file}"
    ln -rs "${target_dir}/bin/studio.sh" "${sym_file}"
    cat > "${HOME}/.local/share/applications/android-studio.desktop" <<EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=Android Stuio
Comment=Android Studio provides the fastest tools for building apps on every type of Android device.
Icon=android-studio
Exec=/bin/sh ${target_dir}/bin/studio.sh %F
Terminal=false
Categories=Development;IDE;TextEditor;
EOF
    update-desktop-database "${HOME}/.local/share/applications"
    return 0
}

_install_atom_from_tar() {
    local tar_file=$1
    local target_dir=${2:-"${HOME}/.atom/bin"}
    if [ -z "${tar_file}" ]; then
        echo "Usage: $0 [TAR_FILE] [TARGET_DIR]?"
        return 255
    fi

    mkdir -p "${target_dir}"
    tar -C "${target_dir}" -xf "${tar_file}" --strip-components=1
    if [ $? -ne 0 ]; then
        >&2 echo "Can't unpack '${tar_file}' to '${target_dir}'"
        return 255;
    fi

    local sym_file="${HOME}/.bin/atom"
    mkdir -p $(dirname "${sym_file}")
    rm -rf "${sym_file}"
    ln -rs "${target_dir}/atom" "${sym_file}"
    if [ $? -ne 0 ]; then
        >&2 echo "Can't create a symbolic link at '${sym_file}'"
        return 255;
    fi
    cat > "${HOME}/.local/share/applications/atom.desktop" <<EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=Atom
Comment=A hackable text editor for the 21st Century
Icon=atom
TryExec=${target_dir}/atom
Exec=${target_dir}/atom %F
Terminal=false
MimeType=text/css;text/english;text/html;text/plain;text/x-c;text/x-chdr;text/x-csrc;text/x-c++;text/x-c++hdr;text/x-c++src;text/x-java;text/x-makefile;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;
Categories=Development;IDE;TextEditor;
EOF
    update-desktop-database "${HOME}/.local/share/applications"
    return 0
}

_install_vs_code_from_tar() {
    local tar_file=$1
    local target_dir=${2:-"${HOME}/.vscode"}
    if [ -z "${tar_file}" ]; then
        echo "Usage: $0 [TAR_FILE] [TARGET_DIR]?"
        return 255
    fi
    local system_electron=${3:-''}

    if [ -d "${target_dir}" ]; then
        rm -rf "${target_dir}".old
        mv "${target_dir}" "${target_dir}".old
    fi
    mkdir -p "${target_dir}"
    tar -C "${target_dir}" -xf "${tar_file}" --strip-components=1 'VSCode-linux-x64'
    if [ $? -ne 0 ]; then
        >&2 echo "Can't unpack '${tar_file}' to '${target_dir}'"
        return 255;
    fi

    local sym_file="${HOME}/.bin/code"
    mkdir -p $(dirname "${sym_file}")
    rm -rf "${sym_file}"
    ln -rs "${target_dir}/bin/code" "${sym_file}"
    if [ $? -ne 0 ]; then
        >&2 echo "Can't create a symbolic link at '${sym_file}'"
        return 255;
    fi
    cat > "${target_dir}/bin/code-wrapper" <<\EOF
#!/bin/bash
DIR=$(dirname $0)
source ~/.script/setup
exec "${DIR}/code" $@
EOF
    chmod +x "${target_dir}/bin/code-wrapper"
    cat > "${HOME}/.local/share/applications/visual-studio-code.desktop" <<EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=Visual Studio Code
GenericName=VS Code
Comment=Multiplatform Visual Studio Code from Microsoft
Icon=${target_dir}/resources/app/resources/linux/code.png
TryExec=${target_dir}/bin/code
Exec=${target_dir}/bin/code-wrapper %F
Terminal=true
MimeType=text/css;text/english;text/html;text/plain;text/x-c;text/x-chdr;text/x-csrc;text/x-c++;text/x-c++hdr;text/x-c++src;text/x-java;text/x-makefile;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;
Categories=Development;IDE;TextEditor;
StartupWMClass=Code
EOF

    echo -n "Do you want to install extensions? (Y or N): "
    read yn
    if [ -n "$(echo ${yn} | grep -E -i '^y(es)?$')" ]; then
        local extensions=(
            'bmewburn.vscode-intelephense-client'
            'bungcip.better-toml'
            'coolbear.systemd-unit-file'
            'DavidAnson.vscode-markdownlint'
            'dbaeumer.vscode-eslint'
            'DotJoshJohnson.xml'
            'eamodio.gitlens'
            'EditorConfig.EditorConfig'
            'golang.go'
            'HookyQR.beautify'
            'LaurentTreguier.rpm-spec'
            'mads-hartmann.bash-ide-vscode'
            'maelvalais.autoconf'
            'matklad.rust-analyzer'
            'ms-python.python'
            'ms-vscode-remote.remote-containers'
            'ms-vscode-remote.remote-ssh'
            'ms-vscode-remote.remote-ssh-edit'
            'ms-vscode-remote.remote-wsl'
            'ms-vscode-remote.vscode-remote-extensionpack'
            'ms-vscode.cmake-tools'
            'ms-vscode.cpptools'
            'ms-vscode.vscode-typescript-tslint-plugin'
            'msjsdiag.debugger-for-chrome'
            'PKief.material-icon-theme'
            'ryuta46.multi-command'
            'shardulm94.trailing-spaces'
            'slevesque.vscode-hexdump'
            'vadimcn.vscode-lldb'
            'vscodevim.vim')
        for ext in "${extensions[@]}"; do
            ${target_dir}/bin/code --install-extension ${ext}
        done
    fi
    update-desktop-database "${HOME}/.local/share/applications"

    if [ -n "${system_electron}" ]; then
        local files=(
            'chrome_100_percent.pak'
            'chrome_200_percent.pak'
            'chrome-sandbox'
            'code-insiders'
            'icudtl.dat'
            'libEGL.so'
            'libffmpeg.so'
            'libGLESv2.so'
            'libvk_swiftshader.so'
            'libvulkan.so'
            'locales'
            'snapshot_blob.bin'
            'swiftshader'
            'v8_context_snapshot.bin'
            'vk_swiftshader_icd.json')
        for file in "${files[@]}"; do
            rm -rf "${target_dir}/${file}"
        done
        cp -r "${system_electron}/"* "${target_dir}/"
        # use system libraries
        rm -f "${target_dir}/libffmpeg.so"
        rm -f "${target_dir}/libEGL.so"
        rm -f "${target_dir}/libGLESv2.so"
        sed -i -e 's@$VSCODE_PATH/code@$VSCODE_PATH/electron@g' "${target_dir}/bin/code"
    fi

    local old='".mtku { text-decoration: underline; text-underline-position: under; }"'
    local new='".mtku { text-decoration: underline; text-underline-position: initial; text-decoration-style: dotted; }"'
    local file="${target_dir}/resources/app/out/vs/workbench/workbench.desktop.main.js"
    grep -F "${old}" "${file}" >/dev/null
    if [ $? -eq 0 ]; then
        sed -i "s/${old}/${new}/g" "${file}"
    else
        echo "'.mtku' style was changed!"
    fi

    local old='"\[Unsupported\]"'
    local new='"\[Customized\]"'
    local file="${target_dir}/resources/app/out/vs/workbench/workbench.desktop.main.nls.js"
    grep -E "${old}" "${file}" >/dev/null
    if [ $? -eq 0 ]; then
        sed -i "s/${old}/${new}/g" "${file}"
    else
        echo "'titlebarPart' style was changed!"
    fi

    return 0
}

_install_vs_code_insiders_from_tar() {
    local tar_file=$1
    local target_dir=${2:-"${HOME}/.vscode-insiders"}
    if [ -z "${tar_file}" ]; then
        echo "Usage: $0 [TAR_FILE] [TARGET_DIR]?"
        return 255
    fi
    local system_electron=${3:-''}

    if [ -d "${target_dir}" ]; then
        rm -rf "${target_dir}".old
        mv "${target_dir}" "${target_dir}".old
    fi
    mkdir -p "${target_dir}"
    tar -C "${target_dir}" -xf "${tar_file}" --strip-components=1 'VSCode-linux-x64'
    if [ $? -ne 0 ]; then
        >&2 echo "Can't unpack '${tar_file}' to '${target_dir}'"
        return 255;
    fi

    local sym_file="${HOME}/.bin/code-insiders"
    mkdir -p $(dirname "${sym_file}")
    rm -rf "${sym_file}"
    ln -rs "${target_dir}/bin/code-insiders" "${sym_file}"
    if [ $? -ne 0 ]; then
        >&2 echo "Can't create a symbolic link at '${sym_file}'"
        return 255;
    fi
    cat > ${target_dir}/bin/code-wrapper <<\EOF
#!/bin/bash
DIR=$(dirname $0)
source ~/.script/setup
switches='--use-gl=desktop --ignore-gpu-blacklist --enable-gpu-rasterization --enable-zero-copy --enable-oop-rasterization'
exec "${DIR}/code-insiders" $@ ${switches}
EOF
    chmod +x "${target_dir}/bin/code-wrapper"
    cat > "${HOME}/.local/share/applications/visual-studio-code-insiders.desktop" <<EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=Visual Studio Code Insiders
GenericName=VS Code Insiders
Comment=Multiplatform Visual Studio Code Insiders from Microsoft
Icon=${target_dir}/resources/app/resources/linux/code.png
TryExec=${target_dir}/bin/code-insiders
Exec=${target_dir}/bin/code-wrapper %F
Terminal=true
MimeType=text/css;text/english;text/html;text/plain;text/x-c;text/x-chdr;text/x-csrc;text/x-c++;text/x-c++hdr;text/x-c++src;text/x-java;text/x-makefile;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;
Categories=Development;IDE;TextEditor;
StartupWMClass=Code - Insiders
EOF

    echo -n "Do you want to install extensions? (Y or N): "
    read yn
    if [ -n "$(echo ${yn} | grep -E -i '^y(es)?$')" ]; then
        local extensions=(
            'bmewburn.vscode-intelephense-client'
            'bungcip.better-toml'
            'coolbear.systemd-unit-file'
            'DavidAnson.vscode-markdownlint'
            'dbaeumer.vscode-eslint'
            'DotJoshJohnson.xml'
            'eamodio.gitlens'
            'EditorConfig.EditorConfig'
            'golang.go'
            'HookyQR.beautify'
            'LaurentTreguier.rpm-spec'
            'mads-hartmann.bash-ide-vscode'
            'maelvalais.autoconf'
            'matklad.rust-analyzer'
            'ms-python.python'
            'ms-vscode-remote.remote-containers'
            'ms-vscode-remote.remote-ssh'
            'ms-vscode-remote.remote-ssh-edit'
            'ms-vscode-remote.remote-wsl'
            'ms-vscode-remote.vscode-remote-extensionpack'
            'ms-vscode.cmake-tools'
            'ms-vscode.cpptools'
            'ms-vscode.vscode-typescript-tslint-plugin'
            'msjsdiag.debugger-for-chrome'
            'PKief.material-icon-theme'
            'ryuta46.multi-command'
            'shardulm94.trailing-spaces'
            'slevesque.vscode-hexdump'
            'vadimcn.vscode-lldb'
            'vscodevim.vim')
        for ext in "${extensions[@]}"; do
            ${target_dir}/bin/code-insiders --install-extension ${ext}
        done
    fi
    update-desktop-database "${HOME}/.local/share/applications"

    if [ -n "${system_electron}" ]; then
        local files=(
            'chrome_100_percent.pak'
            'chrome_200_percent.pak'
            'chrome-sandbox'
            'code-insiders'
            'icudtl.dat'
            'libEGL.so'
            'libffmpeg.so'
            'libGLESv2.so'
            'libvk_swiftshader.so'
            'libvulkan.so'
            'locales'
            'snapshot_blob.bin'
            'swiftshader'
            'v8_context_snapshot.bin'
            'vk_swiftshader_icd.json')
        for file in "${files[@]}"; do
            rm -rf "${target_dir}/${file}"
        done
        cp -r "${system_electron}/"* "${target_dir}/"
        # use system libraries
        rm -f "${target_dir}/libffmpeg.so"
        rm -f "${target_dir}/libEGL.so"
        rm -f "${target_dir}/libGLESv2.so"
        sed -i -e 's@$VSCODE_PATH/code-insiders@$VSCODE_PATH/electron@g' "${target_dir}/bin/code-insiders"
    fi

    local old='".mtku { text-decoration: underline; text-underline-position: under; }"'
    local new='".mtku { text-decoration: underline; text-underline-position: initial; text-decoration-style: dotted; }"'
    local file="${target_dir}/resources/app/out/vs/workbench/workbench.desktop.main.js"
    grep -E "${old}" "${file}" >/dev/null
    if [ $? -eq 0 ]; then
        sed -i "s/${old}/${new}/g" "${file}"
    else
        echo "'.mtku' style was changed!"
    fi

    local old='"\[Unsupported\]"'
    local new='"\[Customized\]"'
    local file="${target_dir}/resources/app/out/vs/workbench/workbench.desktop.main.nls.js"
    grep -E "${old}" "${file}" >/dev/null
    if [ $? -eq 0 ]; then
        sed -i "s/${old}/${new}/g" "${file}"
    else
        echo "'titlebarPart' style was changed!"
    fi

    return 0
}
