#!/bin/bash

_install_android_studio_from_tar() {
    local tar_file=$1
    local target_dir=${2:-"${HOME}/.android-studio"}
    if [ -z "${tar_file}" ]; then
        echo "Usage: $0 [TAR_FILE] [TARGET_DIR]?"
        return 255
    fi

    mkdir -p "${target_dir}"
    tar -C "${target_dir}" -xf "${tar_file}" --strip-components=1 'android-studio'
    if [ $? -ne 0 ]; then
        >&2 echo "Can't unpack '${tar_file}' to '${target_dir}'"
        return 255;
    fi

    local sym_file="${HOME}/.bin/android-studio"
    mkdir -p $(dirname "${sym_file}")
    rm -rf "${sym_file}"
    ln -rs "${target_dir}/bin/studio.sh" "${sym_file}"
    cat > "${HOME}/.local/share/applications/android-studio.desktop" <<EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=Android Stuio
Comment=Android Studio provides the fastest tools for building apps on every type of Android device.
Icon=android-studio
Exec=/bin/sh ${target_dir}/bin/studio.sh %F
Terminal=false
Categories=Development;IDE;TextEditor;
EOF
    update-desktop-database "${HOME}/.local/share/applications"
    return 0
}

_install_atom_from_tar() {
    local tar_file=$1
    local target_dir=${2:-"${HOME}/.atom/bin"}
    if [ -z "${tar_file}" ]; then
        echo "Usage: $0 [TAR_FILE] [TARGET_DIR]?"
        return 255
    fi

    mkdir -p "${target_dir}"
    tar -C "${target_dir}" -xf "${tar_file}" --strip-components=1
    if [ $? -ne 0 ]; then
        >&2 echo "Can't unpack '${tar_file}' to '${target_dir}'"
        return 255;
    fi

    local sym_file="${HOME}/.bin/atom"
    mkdir -p $(dirname "${sym_file}")
    rm -rf "${sym_file}"
    ln -rs "${target_dir}/atom" "${sym_file}"
    if [ $? -ne 0 ]; then
        >&2 echo "Can't create a symbolic link at '${sym_file}'"
        return 255;
    fi
    cat > "${HOME}/.local/share/applications/atom.desktop" <<EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=Atom
Comment=A hackable text editor for the 21st Century
Icon=atom
TryExec=${target_dir}/atom
Exec=${target_dir}/atom %F
Terminal=false
MimeType=text/css;text/english;text/html;text/plain;text/x-c;text/x-chdr;text/x-csrc;text/x-c++;text/x-c++hdr;text/x-c++src;text/x-java;text/x-makefile;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;
Categories=Development;IDE;TextEditor;
EOF
    update-desktop-database "${HOME}/.local/share/applications"
    return 0
}

vscode_extensions=(
    'aaron-bond.better-comments'
    'bmewburn.vscode-intelephense-client'
    'bungcip.better-toml'
    'CoenraadS.bracket-pair-colorizer-2'
    'coolbear.systemd-unit-file'
    'DavidAnson.vscode-markdownlint'
    'dbaeumer.vscode-eslint'
    'DotJoshJohnson.xml'
    'eamodio.gitlens'
    'EditorConfig.EditorConfig'
    'golang.go'
    'LaurentTreguier.rpm-spec'
    'mads-hartmann.bash-ide-vscode'
    'maelvalais.autoconf'
    'matklad.rust-analyzer'
    'ms-python.vscode-pylance'
    'ms-vscode-remote.remote-containers'
    'ms-vscode-remote.remote-ssh'
    'ms-vscode-remote.remote-ssh-edit'
    'ms-vscode-remote.remote-wsl'
    'ms-vscode-remote.vscode-remote-extensionpack'
    'ms-vscode.cmake-tools'
    'ms-vscode.cpptools'
    'ms-vscode.vscode-typescript-tslint-plugin'
    'msjsdiag.debugger-for-chrome'
    'PKief.material-icon-theme'
    'ryuta46.multi-command'
    'shardulm94.trailing-spaces'
    'slevesque.vscode-hexdump'
    'vadimcn.vscode-lldb'
    'vscodevim.vim')

_install_vs_code_from_tar() {
    local tar_file=$1
    local target_dir=${2:-"${HOME}/.vscode"}
    if [ -z "${tar_file}" ]; then
        echo "Usage: $0 [TAR_FILE] [TARGET_DIR]?"
        return 255
    fi

    if [ -d "${target_dir}" ]; then
        rm -rf "${target_dir}".old
        mv "${target_dir}" "${target_dir}".old
    fi
    mkdir -p "${target_dir}"
    tar -C "${target_dir}" -xf "${tar_file}" --strip-components=1 'VSCode-linux-x64'
    if [ $? -ne 0 ]; then
        >&2 echo "Can't unpack '${tar_file}' to '${target_dir}'"
        return 255;
    fi

    local sym_file="${HOME}/.bin/code"
    mkdir -p $(dirname "${sym_file}")
    rm -rf "${sym_file}"
    ln -rs "${target_dir}/bin/code" "${sym_file}"
    if [ $? -ne 0 ]; then
        >&2 echo "Can't create a symbolic link at '${sym_file}'"
        return 255;
    fi
    cat > "${target_dir}/bin/code-wrapper" <<\EOF
#!/bin/bash
DIR=$(dirname $0)
[ -r "${HOME}/.script/setup" ] && source "${HOME}/.script/setup"
switches='--use-gl=desktop --ignore-gpu-blacklist --enable-gpu-rasterization --enable-zero-copy'
exec "${DIR}/code" $@ ${switches}
EOF
    chmod +x "${target_dir}/bin/code-wrapper"
    cat > "${HOME}/.local/share/applications/visual-studio-code.desktop" <<EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=Visual Studio Code
GenericName=VS Code
Comment=Multiplatform Visual Studio Code from Microsoft
Icon=${target_dir}/resources/app/resources/linux/code.png
TryExec=${target_dir}/bin/code
Exec=${target_dir}/bin/code-wrapper %F
Terminal=true
MimeType=text/css;text/english;text/html;text/plain;text/x-c;text/x-chdr;text/x-csrc;text/x-c++;text/x-c++hdr;text/x-c++src;text/x-java;text/x-makefile;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;
Categories=Development;IDE;TextEditor;
StartupWMClass=Code
EOF

    echo -n "Do you want to install extensions? (Y or N): "
    read yn
    if [ -n "$(echo ${yn} | grep -E -i '^y(es)?$')" ]; then
        for ext in "${vscode_extensions[@]}"; do
            ${target_dir}/bin/code --install-extension ${ext}
        done
    fi
    update-desktop-database "${HOME}/.local/share/applications"

    echo -n "Do you want to customize? (Y or N): "
    read yn
    if [ -n "$(echo ${yn} | grep -E -i '^y(es)?$')" ]; then
        local old='".mtku { text-decoration: underline; text-underline-position: under; }"'
        local new='".mtku { text-decoration: underline; text-underline-position: initial; text-decoration-style: dotted; }"'
        local file="${target_dir}/resources/app/out/vs/workbench/workbench.desktop.main.js"
        grep -F "${old}" "${file}" >/dev/null
        if [ $? -eq 0 ]; then
            sed -i "s/${old}/${new}/g" "${file}"
        else
            echo "'.mtku' style was changed!"
        fi

        local old='"\[Unsupported\]"'
        local new='"\[Customized\]"'
        local file="${target_dir}/resources/app/out/vs/workbench/workbench.desktop.main.nls.js"
        grep -E "${old}" "${file}" >/dev/null
        if [ $? -eq 0 ]; then
            sed -i "s/${old}/${new}/g" "${file}"
        else
            echo "'titlebarPart' style was changed!"
        fi
    fi

    return 0
}

_install_vs_code_insiders_from_tar() {
    local tar_file=$1
    local target_dir=${2:-"${HOME}/.vscode-insiders"}
    if [ -z "${tar_file}" ]; then
        echo "Usage: $0 [TAR_FILE] [TARGET_DIR]?"
        return 255
    fi

    if [ -d "${target_dir}" ]; then
        rm -rf "${target_dir}".old
        mv "${target_dir}" "${target_dir}".old
    fi
    mkdir -p "${target_dir}"
    tar -C "${target_dir}" -xf "${tar_file}" --strip-components=1 'VSCode-linux-x64'
    if [ $? -ne 0 ]; then
        >&2 echo "Can't unpack '${tar_file}' to '${target_dir}'"
        return 255;
    fi

    local sym_file="${HOME}/.bin/code-insiders"
    mkdir -p $(dirname "${sym_file}")
    rm -rf "${sym_file}"
    ln -rs "${target_dir}/bin/code-insiders" "${sym_file}"
    if [ $? -ne 0 ]; then
        >&2 echo "Can't create a symbolic link at '${sym_file}'"
        return 255;
    fi
    cat > ${target_dir}/bin/code-wrapper <<\EOF
#!/bin/bash
DIR=$(dirname $0)
source ~/.script/setup
switches='--use-gl=desktop --ignore-gpu-blacklist --enable-zero-copy --enable-gpu-rasterization --enable-oop-rasterization'
exec "${DIR}/code-insiders" $@ ${switches}
EOF
    chmod +x "${target_dir}/bin/code-wrapper"
    cat > "${HOME}/.local/share/applications/visual-studio-code-insiders.desktop" <<EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=Visual Studio Code Insiders
GenericName=VS Code Insiders
Comment=Multiplatform Visual Studio Code Insiders from Microsoft
Icon=${target_dir}/resources/app/resources/linux/code.png
TryExec=${target_dir}/bin/code-insiders
Exec=${target_dir}/bin/code-wrapper %F
Terminal=true
MimeType=text/css;text/english;text/html;text/plain;text/x-c;text/x-chdr;text/x-csrc;text/x-c++;text/x-c++hdr;text/x-c++src;text/x-java;text/x-makefile;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;
Categories=Development;IDE;TextEditor;
StartupWMClass=Code - Insiders
EOF

    echo -n "Do you want to install extensions? (Y or N): "
    read yn
    if [ -n "$(echo ${yn} | grep -E -i '^y(es)?$')" ]; then
        for ext in "${vscode_extensions[@]}"; do
            ${target_dir}/bin/code-insiders --install-extension ${ext}
        done
    fi
    update-desktop-database "${HOME}/.local/share/applications"

    echo -n "Do you want to customize? (Y or N): "
    read yn
    if [ -n "$(echo ${yn} | grep -E -i '^y(es)?$')" ]; then
        local old='".mtku { text-decoration: underline; text-underline-position: under; }"'
        local new='".mtku { text-decoration: underline; text-underline-position: initial; text-decoration-style: dotted; }"'
        local file="${target_dir}/resources/app/out/vs/workbench/workbench.desktop.main.js"
        grep -E "${old}" "${file}" >/dev/null
        if [ $? -eq 0 ]; then
            sed -i "s/${old}/${new}/g" "${file}"
        else
            echo "'.mtku' style was changed!"
        fi

        local old='"\[Unsupported\]"'
        local new='"\[Customized\]"'
        local file="${target_dir}/resources/app/out/vs/workbench/workbench.desktop.main.nls.js"
        grep -E "${old}" "${file}" >/dev/null
        if [ $? -eq 0 ]; then
            sed -i "s/${old}/${new}/g" "${file}"
        else
            echo "'titlebarPart' style was changed!"
        fi
    fi

    return 0
}

_install_skype_from_rpm() {
    local rpm_file=$1
    local target_dir=${2:-"${HOME}/.skype"}
    if [ -z "${rpm_file}" ]; then
        echo "Usage: $0 [TAR_FILE] [TARGET_DIR]?"
        return 255
    fi

    if [ -d "${target_dir}" ]; then
        rm -rf "${target_dir}".old
        mv "${target_dir}" "${target_dir}".old
    fi
    mkdir -p "${target_dir}"

    local tar_file="${rpm_file%.*}.tar"
    rpm2tar -O "${rpm_file}" > "${tar_file}"
    if [ $? -ne 0 ]; then
        >&2 echo "Can't conver '${rpm_file}' to '${tar_file}', make sure 'app-arch/rpm2targz' is installed."
        return 255;
    fi
    tar -C "${target_dir}" -xf "${tar_file}" --strip-components=4 './usr/share/skypeforlinux'
    if [ $? -ne 0 ]; then
        >&2 echo "Can't unpack '${tar_file}' to '${target_dir}'"
        rm -rf "${tar_file}"
        return 255;
    fi
    tar -C "${HOME}/.local/share/icons" -xf "${tar_file}" --strip-components=4 './usr/share/icons'
    if [ $? -ne 0 ]; then
        >&2 echo "Can't extract an application file form '${rpm_file}'"
        rm -rf "${tar_file}"
        return 255;
    fi
    tar -C "${HOME}/.local/share/applications" -xf "${tar_file}" --strip-components=4 './usr/share/applications'
    if [ $? -ne 0 ]; then
        >&2 echo "Can't extract an application file form '${rpm_file}'"
        rm -rf "${tar_file}"
        return 255;
    fi
    rm -rf "${tar_file}"

    local skype_bin="${HOME}/.bin/skypeforlinux"
    cat > "${skype_bin}" <<EOF
#!/bin/sh
SCRIPT=\$(readlink -f "\$0")
USR_DIRECTORY=\$(readlink -f \$(dirname \$SCRIPT)/..)
SKYPE_PATH="${target_dir}/skypeforlinux"
SKYPE_LOGS="\$HOME/.config/skypeforlinux/logs"
mkdir -p \$SKYPE_LOGS
switches='--use-gl=desktop --ignore-gpu-blacklist --enable-gpu-rasterization --enable-zero-copy'
nohup "\$SKYPE_PATH" --executed-from="\$(pwd)" --pid=\$\$ "\$@" \${switches} > "\$SKYPE_LOGS/skype-startup.log" 2>&1 &
EOF
    chmod +x "${skype_bin}"

    sed -i -e "s@/usr/bin/skypeforlinux@${skype_bin}@g" "${HOME}/.local/share/applications/skypeforlinux.desktop"
    sed -i -e "s@/usr/bin/skypeforlinux@${skype_bin}@g" "${HOME}/.local/share/applications/skypeforlinux-share.desktop"
    update-desktop-database "${HOME}/.local/share/applications"

    return 0
}

_install_teams_from_rpm() {
    local rpm_file=$1
    local target_dir=${2:-"${HOME}/.teams"}
    if [ -z "${rpm_file}" ]; then
        echo "Usage: $0 [TAR_FILE] [TARGET_DIR]?"
        return 255
    fi

    if [ -d "${target_dir}" ]; then
        rm -rf "${target_dir}".old
        mv "${target_dir}" "${target_dir}".old
    fi
    mkdir -p "${target_dir}"

    local tar_file="${rpm_file%.*}.tar"
    rpm2tar -O "${rpm_file}" > "${tar_file}"
    if [ $? -ne 0 ]; then
        >&2 echo "Can't conver '${rpm_file}' to '${tar_file}', make sure 'app-arch/rpm2targz' is installed."
        return 255;
    fi
    tar -C "${target_dir}" -xf "${tar_file}" --strip-components=4 './usr/share/teams'
    if [ $? -ne 0 ]; then
        >&2 echo "Can't unpack '${tar_file}' to '${target_dir}'"
        rm -rf "${tar_file}"
        return 255;
    fi
    tar -C "${HOME}/.local/share/applications" -xf "${tar_file}" --strip-components=4 './usr/share/applications'
    if [ $? -ne 0 ]; then
        >&2 echo "Can't extract an application file form '${rpm_file}'"
        rm -rf "${tar_file}"
        return 255;
    fi
    rm -rf "${tar_file}"

    local teams_bin="${HOME}/.bin/teams"
    cat > "${teams_bin}" <<EOF
#!/bin/sh
SCRIPT=\$(readlink -f "\$0")
USR_DIRECTORY=\$(readlink -f \$(dirname \$SCRIPT)/..)
TEAMS_PATH="${target_dir}/teams"
TEAMS_LOGS="\$HOME/.config/Microsoft/Microsoft Teams/logs"
mkdir -p "\$TEAMS_LOGS"
nohup "\$TEAMS_PATH" "\$@" > "\$TEAMS_LOGS/teams-startup.log" 2>&1 &
EOF
    chmod +x "${teams_bin}"

    sed -i -e "s@Exec=teams@Exec=${teams_bin}@g" "${HOME}/.local/share/applications/teams.desktop"
    sed -i -e "s@/usr/bin/teams@${teams_bin}@g"  "${HOME}/.local/share/applications/teams.desktop"
    update-desktop-database "${HOME}/.local/share/applications"

    return 0
}

_install_slack_from_rpm() {
    local rpm_file=$1
    local target_dir=${2:-"${HOME}/.slack"}
    if [ -z "${rpm_file}" ]; then
        echo "Usage: $0 [TAR_FILE] [TARGET_DIR]?"
        return 255
    fi

    if [ -d "${target_dir}" ]; then
        rm -rf "${target_dir}".old
        mv "${target_dir}" "${target_dir}".old
    fi
    mkdir -p "${target_dir}"
    mkdir -p "${HOME}/.local/share/applications"
    mkdir -p "${HOME}/.local/share/pixmaps"

    local tar_file="${rpm_file%.*}.tar"
    rpm2tar -O "${rpm_file}" > "${tar_file}"
    if [ $? -ne 0 ]; then
        >&2 echo "Can't conver '${rpm_file}' to '${tar_file}', make sure 'app-arch/rpm2targz' is installed."
        return 255;
    fi
    tar -C "${target_dir}" -xf "${tar_file}" --strip-components=4 './usr/lib/slack'
    if [ $? -ne 0 ]; then
        >&2 echo "Can't unpack '${tar_file}' to '${target_dir}'"
        rm -rf "${tar_file}"
        return 255;
    fi
    tar -C "${HOME}/.local/share/applications" -xf "${tar_file}" --strip-components=4 './usr/share/applications'
    if [ $? -ne 0 ]; then
        >&2 echo "Can't extract an application file form '${rpm_file}'"
        rm -rf "${tar_file}"
        return 255;
    fi
    tar -C "${HOME}/.local/share/pixmaps" -xf "${tar_file}" --strip-components=4 './usr/share/pixmaps'
    if [ $? -ne 0 ]; then
        >&2 echo "Can't extract an application file form '${rpm_file}'"
        rm -rf "${tar_file}"
        return 255;
    fi
    rm -rf "${tar_file}"

    local slack_bin="${HOME}/.bin/slack"
    cat > "${slack_bin}" <<EOF
#!/bin/sh
switches='--use-gl=desktop --ignore-gpu-blacklist --enable-gpu-rasterization --enable-zero-copy'
exec ${target_dir}/slack \$@ \${switches}
EOF
    chmod +x "${slack_bin}"

    sed -i -e "s@/usr/bin/slack@${slack_bin}@g"                      "${HOME}/.local/share/applications/slack.desktop"
    sed -i -e "s@/usr/share/pixmaps@${HOME}/.local/share/pixmaps@g"  "${HOME}/.local/share/applications/slack.desktop"
    update-desktop-database "${HOME}/.local/share/applications"

    return 0
}
